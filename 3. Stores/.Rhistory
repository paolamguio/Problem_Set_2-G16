rm(list = ls())
setwd("C:/Users/amorales/OneDrive - ANI/Documentos/GitHub/Problem_Set_2-G16/3. Stores")
## llamado librerías de la sesión
require(pacman)
p_load(
tidyverse,
rvest,
writexl,
rio,
skimr,
pastecs,
PerformanceAnalytics,
naniar,
gtsummary,
caret,
modelsummary,
gamlr,
ROCR,
pROC,
smotefamily,
rpart,
randomForest,
fastAdaboost,
glmnet,
rpart.plot
)
### 1. llamado base de datos creada en 2.data_cleaning2.R ###
df_hogares <- import("df_hogares.rds")
### 2. Ajustes base de datos ###
df_hogares <- df_hogares %>% select(c("id", "Dominio", "Nper", "Lp", "Pobre", "tipo_vivienda", "Nro_cuartos", "Nro_personas_cuartos", "cuota_amortizacion", "arriendo", "Nro_mujeres", "edad_promedio", "jefe_hogar_mujer", "Nro_hijos", "edu_promedio", "horas_trabajadas_promedio", "Ingtotob_hogar", "porcentaje_mujeres", "porcentaje_trabajo_formal", "porcentaje_subsidio_familiar", "segundo_trabajo", "otros_ingresos", "otros_ingresos_instituciones", "tasa_ocupacion", "tasa_desempleo", "tasa_inactivas", "tasa_participacion"))
summary(df_hogares)
#Creación de variable
df_hogares <- df_hogares %>% mutate(edad_promedio2 = edad_promedio^2)
prop.table(table(df_hogares$Pobre))
### 3.Partición base de datos en tres ###
# base de datos de entrenamiento
set.seed(156)
split1 <- createDataPartition(df_hogares$Pobre , p = 0.7)[[1]]
length(split1)
training = df_hogares[split1,]
other <- df_hogares[-split1,]
# Creación de bases de evaluación y testeo
set.seed(934)
split2 <- createDataPartition(other$Pobre , p = 1/3)[[1]]
evaluation <- other[split2,]
testing <- other[-split2,]
dim(training)
dim(testing)
dim(evaluation)
prop.table(table(training$Pobre))
prop.table(table(testing$Pobre))
prop.table(table(evaluation$Pobre))
predict <- stats::predict
colnames(training)
### 4.se definen dos modelos con distintas variables de interes ###
model <- as.formula("Pobre ~ tipo_vivienda + Dominio + Nro_personas_cuartos + cuota_amortizacion + arriendo + edad_promedio + jefe_hogar_mujer + Nro_hijos + edu_promedio + horas_trabajadas_promedio + porcentaje_mujeres + porcentaje_trabajo_formal + porcentaje_subsidio_familiar + segundo_trabajo + otros_ingresos + otros_ingresos_instituciones + tasa_ocupacion + tasa_desempleo + tasa_participacion")
model2 <- as.formula("Pobre ~ tipo_vivienda + Dominio + Nro_personas_cuartos + cuota_amortizacion + arriendo + edad_promedio + edad_promedio:porcentaje_mujeres + jefe_hogar_mujer + Nro_hijos + Nro_hijos:porcentaje_mujeres + edu_promedio + edu_promedio:porcentaje_mujeres + edu_promedio:Dominio + edu_promedio:jefe_hogar_mujer + horas_trabajadas_promedio + horas_trabajadas_promedio:porcentaje_mujeres + horas_trabajadas_promedio:jefe_hogar_mujer + porcentaje_mujeres + porcentaje_trabajo_formal + porcentaje_subsidio_familiar + segundo_trabajo + otros_ingresos + otros_ingresos_instituciones + tasa_ocupacion + tasa_desempleo + tasa_participacion")
fiveStats <- function(...) c(twoClassSummary(...), defaultSummary(...))
### 4. Modelos de predicción ###
ctrl<- trainControl(method = "cv",
number = 5,
summaryFunction = fiveStats,
classProbs = TRUE,
verbose=FALSE,
savePredictions = T)
## 4.1. Modelo Logit - datos de entrenamiento ###
set.seed(1410)
logit <- train(
model,
data = training,
method = "glm",
trControl = ctrl,
family = "binomial",
preProcess = c("center", "scale")
)
logit
logit2 <- train(
model2,
data = training,
method = "glm",
trControl = ctrl,
family = "binomial",
preProcess = c("center", "scale")
)
